-- ✅ Placer Turtle Settings
local totalFiles = 122
local startIndex = 1

-- ✅ Function: Wait for Previous Worker Turtle to be Removed
local function waitForTurtleRemoval()
    print("⏳ Waiting for previous Worker Turtle to be removed...")
    while turtle.detect() do
        sleep(2)
    end
    print("✅ Worker Turtle removed! Placing next one.")
end

-- ✅ Function: Write `block_data_index.txt` to Worker Turtle
local function writeToWorker(filePath, content)
    local file = fs.open("front/" .. filePath, "w")
    if file then
        file.write(content)
        file.close()
        sleep(0.5) -- Ensure the file system registers the file
        return true
    else
        print("❌ ERROR: Failed to write `" .. filePath .. "` to Worker Turtle!")
        return false
    end
end

-- ✅ Function: Place and Setup New Worker Turtle
local function deployWorker(turtleIndex)
    print("📦 Placing Worker Turtle for `output_" .. turtleIndex .. ".lua`")

    -- Wait for space before placing
    waitForTurtleRemoval()

    -- ✅ Place the Worker Turtle
    if not turtle.place() then
        print("❌ ERROR: Failed to place Worker Turtle!")
        return
    end

    -- Sleep to allow Turtle to initialize
    sleep(2)

    -- ✅ Write `block_data_index.txt` inside Worker Turtle
    print("📂 Assigning Block Data Index:", turtleIndex)
    if not writeToWorker("block_data_index.txt", tostring(turtleIndex)) then
        print("❌ ERROR: Failed to assign Block Data Index!")
        return
    end

    -- ✅ Turn On Worker Turtle (Runs `startup.lua` from Disk Drive)
    print("🔄 Turning on Worker Turtle...")
    peripheral.call("front", "turnOn")

    print("✅ Worker Turtle setup complete!")
end

-- ✅ Main Loop: Deploy Worker Turtles Sequentially
for i = startIndex, totalFiles do
    deployWorker(i)
    print("✅ Worker Turtle #" .. i .. " is running! Waiting for removal before placing the next one...")
end

print("🎉 All Worker Turtles deployed!")
