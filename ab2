-- ‚úÖ Define the base URL and number of files to process
local baseUrl = "https://raw.githubusercontent.com/robertjojo123/olympus2/refs/heads/main/output_"
local totalFiles = 122 -- Total block data files

-- ‚úÖ Set a Fixed Starting Position (No GPS Needed)
local pos = {x = -5, y = 0, z = 0, dir = 0} -- Manually set starting position
local lastPlacedIndex = 1 -- Tracks last placed block
local referencePoint = {x = -5, y = 0, z = 0} -- Fixed start reference

-- ‚úÖ Forward Declarations (Prevents Nil Errors)
local waitForFile, downloadBlockData, startBuilding, saveProgress, loadProgress, moveTo, buildSchematic

-- ‚úÖ Function to Save Progress (Survives Reboots)
function saveProgress()
    local file = fs.open("progress.json", "w")
    file.write(textutils.serialize({ lastPlacedIndex = lastPlacedIndex }))
    file.close()
    print("üíæ Progress Saved! Last Placed Index:", lastPlacedIndex)
end

-- ‚úÖ Function to Load Progress (After Reboot)
function loadProgress()
    if fs.exists("progress.json") then
        local file = fs.open("progress.json", "r")
        local data = textutils.unserialize(file.readAll())
        file.close()
        if data and data.lastPlacedIndex then
            lastPlacedIndex = data.lastPlacedIndex
            print("üîÑ Resuming from Block:", lastPlacedIndex)
        end
    else
        print("üöÄ No progress found. Starting fresh.")
    end
end

-- ‚úÖ Function to Wait for a File Before Continuing
function waitForFile(fileName)
    print("üìÇ Waiting for file:", fileName)
    while not fs.exists(fileName) do sleep(1) end
    print("‚úÖ File detected:", fileName)
end

-- ‚úÖ Function to Move Turtle to Target Position
function moveTo(target)
    if not target then
        print("‚ùå ERROR: moveTo() received nil target!")
        return
    end

    print("üöÄ Moving to Target X=" .. target.x .. " Y=" .. target.y .. " Z=" .. target.z)

    while pos.x ~= target.x do
        if pos.x < target.x then while pos.dir ~= 1 do turtle.turnRight() end
        else while pos.dir ~= 3 do turtle.turnRight() end
        end
        turtle.forward()
        pos.x = pos.x + (pos.dir == 1 and 1 or -1)
    end

    while pos.z ~= target.z do
        if pos.z < target.z then while pos.dir ~= 0 do turtle.turnRight() end
        else while pos.dir ~= 2 do turtle.turnRight() end
        end
        turtle.forward()
        pos.z = pos.z + (pos.dir == 0 and 1 or -1)
    end

    while pos.y < target.y do
        turtle.up()
        pos.y = pos.y + 1
    end

    while pos.y > target.y do
        turtle.down()
        pos.y = pos.y - 1
    end

    print("‚úÖ Reached Target Location")
end

-- ‚úÖ Function to Start the Build Process
function startBuilding(fileName)
    print("üèóÔ∏è Starting build process with " .. fileName)
    moveTo({x = referencePoint.x, y = referencePoint.y, z = referencePoint.z + 3})

    -- Check if buildSchematic exists before calling it
    if buildSchematic then
        buildSchematic(fileName)
    else
        print("‚ùå ERROR: buildSchematic function not found!")
    end
end

-- ‚úÖ Function to Load and Execute Block Data
function buildSchematic(fileName)
    if not fs.exists(fileName) then
        print("‚ùå ERROR: Block data file not found: " .. fileName)
        return
    end

    local chunk = loadfile(fileName)
    if not chunk then
        print("‚ùå ERROR: Failed to load file: " .. fileName)
        return
    end

    local success, data = pcall(chunk)
    if not success then
        print("‚ùå ERROR: Could not execute file: " .. fileName)
        return
    end

    for i = lastPlacedIndex, #data do
        local block = data[i]
        if block.block and not block.block:match("^minecraft:") then
            block.block = "minecraft:" .. block.block
        end

        -- Move to the block's location and place it
        moveTo({x = block.x, y = block.y, z = block.z})
        if turtle.getItemCount(1) > 0 then
            turtle.place()
            lastPlacedIndex = i + 1 -- Save progress
            saveProgress() -- Save progress after placing each block
        else
            print("‚ö†Ô∏è Out of materials! Restock needed.")
            return
        end
    end

    print("‚úÖ Build complete for: " .. fileName)
end

-- ‚úÖ Function to Download and Process Block Data Sequentially
function downloadBlockData()
    for i = lastPlacedIndex, totalFiles do
        local fileName = "output.lua"
        local fileUrl = baseUrl .. i .. ".lua"

        -- ‚úÖ Delete previous `output.lua` before downloading the next one
        if fs.exists(fileName) then
            fs.delete(fileName)
        end

        print("üì• Downloading block data: " .. fileUrl)
        shell.run("wget " .. fileUrl .. " " .. fileName)

        -- ‚úÖ Ensure the file was successfully downloaded
        if fs.exists(fileName) then
            print("‚úÖ Block data saved as " .. fileName)
        else
            print("‚ùå ERROR: Failed to download " .. fileUrl)
            return
        end

        -- ‚úÖ Wait for the file to be properly saved before starting the build
        waitForFile(fileName)

        -- ‚úÖ Start building with the downloaded file
        startBuilding(fileName)
    end

    print("üéâ All block data files processed! Build complete.")
end

-- ‚úÖ Load Progress Before Starting
loadProgress()

-- ‚úÖ Start the Block Data Download and Building Process
downloadBlockData()
