-- ‚úÖ Debugging Startup
print("üöÄ Worker Turtle Booting Up...")

-- ‚úÖ Position Tracking (Default Start Position)
local pos = {x = -5, y = 0, z = 0, dir = 0}
local lastPlacedIndex = 1

-- ‚úÖ Fuel & Material Chest Locations
local fuelChest = {x = -9, y = -1, z = -4, dir = 2} 
local fuelItem = "projecte:aeternus_fuel_block"

local materialChests = {
    ["minecraft:wool"]  = {{x = -9, y = 0, z = -4, dir = 2}, {x = -9, y = 1, z = -4, dir = 2}},
    ["minecraft:clay"]  = {{x = -9, y = 2, z = -4, dir = 2}, {x = -9, y = 3, z = -4, dir = 2}},
    ["minecraft:dirt"]  = {{x = -9, y = 4, z = -4, dir = 2}, {x = -9, y = 5, z = -4, dir = 2}}
}

-- ‚úÖ Function: Get the correct block data index
local function getBlockDataIndex()
    local filename = "block_data_index.txt"
    if fs.exists(filename) then
        local file = fs.open(filename, "r")
        local index = tonumber(file.readAll())
        file.close()
        return index
    else
        print("‚ùå ERROR: No block data index found!")
        sleep(3)
        os.shutdown()
    end
end

-- ‚úÖ Function: Download `output.lua` if missing
local function checkForOutputFile()
    if not fs.exists("output.lua") then
        print("üì• `output.lua` missing, downloading...")

        local index = getBlockDataIndex()
        local blockDataBaseUrl = "https://raw.githubusercontent.com/robertjojo123/olympus2/refs/heads/main/output_"
        shell.run("wget " .. blockDataBaseUrl .. index .. ".lua output.lua")

        if not fs.exists("output.lua") then
            print("‚ùå ERROR: Failed to download `output.lua`! Shutting down.")
            sleep(3)
            os.shutdown()
        else
            print("‚úÖ Successfully downloaded `output.lua`!")
        end
    else
        print("‚úÖ `output.lua` detected!")
    end
end

-- ‚úÖ Function: Load Block Data
local function loadBlockData()
    checkForOutputFile()
    print("üì• Loading `output.lua`...")

    local chunk = loadfile("output.lua")
    if chunk then
        local success, data = pcall(chunk)
        if success and type(data) == "table" then
            print("‚úÖ Block data loaded successfully!")
            return data
        end
    end

    print("‚ùå ERROR: Could not load output.lua")
    sleep(3)
    os.shutdown()
    return nil
end

-- ‚úÖ Save Progress
local function saveProgress()
    local file = fs.open("progress.json", "w")
    file.write(textutils.serialize({ lastPlacedIndex = lastPlacedIndex }))
    file.close()
    print("üíæ Progress Saved!")
end

-- ‚úÖ Move to Target Position
local function moveTo(target)
    if not target then return end
    print("üö∂ Moving to X=" .. target.x .. " Y=" .. target.y .. " Z=" .. target.z)

    while pos.x ~= target.x do
        if pos.x < target.x then turtle.turnRight() else turtle.turnLeft() end
        if turtle.forward() then
            pos.x = pos.x + (pos.dir == 1 and 1 or -1)
        else
            print("‚õî Blocked! Can't move forward.")
            return false
        end
    end

    while pos.z ~= target.z do
        if pos.z < target.z then turtle.turnLeft() else turtle.turnRight() end
        if turtle.forward() then
            pos.z = pos.z + (pos.dir == 0 and 1 or -1)
        else
            print("‚õî Blocked! Can't move forward.")
            return false
        end
    end

    print("‚úÖ Arrived at destination.")
    return true
end

-- ‚úÖ Restock Blocks from Material Chests
local function restock(block)
    local blockID = "minecraft:" .. block
    local chests = materialChests[blockID]
    if not chests then return false end

    for _, chest in ipairs(chests) do
        moveTo(chest)
        turtle.turnLeft()
        if turtle.suck(64) then 
            print("‚úÖ Restocked " .. blockID .. "!")
            return true
        end
    end
    print("‚ùå Failed to restock " .. blockID)
    return false
end

-- ‚úÖ Place Block and Move Forward
local function placeBlock(block)
    if not restock(block) then return false end
    local blockID = "minecraft:" .. block
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == blockID then
            turtle.select(i)
            if turtle.placeDown() then
                print("‚úÖ Placed:", blockID)
                if not turtle.forward() then return false end
                return true
            end
        end
    end
    return false
end

-- ‚úÖ Refuel Turtle Using Aeternus Fuel Blocks
local function refuelTurtle()
    if turtle.getFuelLevel() >= 1000 then return true end
    moveTo(fuelChest)
    turtle.turnLeft()
    for _ = 1, 2 do
        if turtle.suck(1) then
            local item = turtle.getItemDetail()
            if item and item.name == fuelItem then
                turtle.refuel()
            end
        end
    end
    return turtle.getFuelLevel() >= 1000
end

-- ‚úÖ Build Process Using Block Data
local function buildSchematic(data)
    if not data or #data == 0 then
        print("‚ùå ERROR: Block data is empty!")
        sleep(3)
        os.shutdown()
        return
    end

    print("‚úÖ Starting Build Process...")
    for i = lastPlacedIndex, #data do
        local block = data[i]
        if block and block.block then
            print("üî® Placing:", block.block, "at", block.x, block.y, block.z)
            moveTo({x = block.x, y = block.y, z = block.z})
            if placeBlock(block.block) then
                lastPlacedIndex = i + 1
                saveProgress()
            else
                print("‚ö†Ô∏è Out of materials or fuel! Build halted.")
                return
            end
        end
    end
    print("‚úÖ Build complete!")
end

-- ‚úÖ Start Build Process
local function startBuild()
    print("üöÄ Starting Build Process...")
    local blockData = loadBlockData()
    if blockData then
        buildSchematic(blockData)
    else
        print("‚ùå ERROR: No valid block data found!")
        sleep(3)
        os.shutdown()
    end

    print("üî¥ Build complete. Shutting down...")
    os.shutdown()
end

startBuild()
