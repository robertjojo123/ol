-- ‚úÖ **Function Forward Declarations**
local moveTo, savePosition, returnToLastPosition, restock, placeBlock, buildSchematic, refuelTurtle

-- ‚úÖ **Position Tracking**
local pos = {x = 0, y = 0, z = 0, dir = 0} -- 0 = +Z, 1 = +X, 2 = -Z, 3 = -X
local lastPos = {x = 0, y = 0, z = 0, dir = 0} -- Last saved position before leaving for refuel/restock

-- ‚úÖ **Material Chest Locations (Including Oak Wood)**
local materialChests = {
    ["minecraft:wool"] = {x = -1, y = 0, z = -4, dir = 3}, -- Auto-fixes white_wool to minecraft:wool
    ["minecraft:clay"] = {x = -1, y = 0, z = 0, dir = 3},
    ["minecraft:dirt"] = {x = -1, y = 0, z = -1, dir = 3},
    ["minecraft:grass"] = {x = -1, y = 0, z = -2, dir = 3}, -- Auto-fixes grass_block to minecraft:grass
    ["minecraft:stone"] = {x = -1, y = 0, z = -3, dir = 3},
    ["minecraft:log"] = {x = -1, y = 0, z = -6, dir = 3} -- Oak Wood (treated as log)
}

-- ‚úÖ **Fuel Chest Location**
local fuelChest = {x = -1, y = 0, z = -5, dir = 3} -- Fuel chest location
local fuelItem = "projecte:aeternus_fuel_block" -- Correct fuel item

-- ‚úÖ **Block Data for Schematic (Including Oak Wood)**
local blocks = {
    {x=0, y=0, z=0, 'white_wool'}, -- Auto-converted to minecraft:wool
    {x=1, y=0, z=0, 'clay'},
    {x=2, y=0, z=0, 'dirt'},
    {x=3, y=0, z=0, 'grass_block'}, -- Auto-converted to minecraft:grass
    {x=4, y=0, z=0, 'stone'},
    {x=5, y=0, z=0, 'white_wool'}, -- Auto-converted to minecraft:wool
    {x=6, y=0, z=0, 'oak_wood'}, -- Oak Wood treated as log
    {x=7, y=0, z=0, 'dirt'}
}

-- ‚úÖ **Fix Block Names (Auto-Corrects White Wool, Grass Block, and Oak Wood to Log)**
local function fixBlockName(block)
    if block == "white_wool" then
        return "minecraft:wool"
    elseif block == "grass_block" then
        return "minecraft:grass"
    elseif block == "oak_wood" then
        return "minecraft:log" -- Correct oak wood to minecraft:log
    else
        return "minecraft:" .. block
    end
end

-- ‚úÖ **Movement Functions**
local function turnLeft()
    turtle.turnLeft()
    pos.dir = (pos.dir - 1) % 4
end

local function turnRight()
    turtle.turnRight()
    pos.dir = (pos.dir + 1) % 4
end

local function moveForward()
    if turtle.forward() then
        if pos.dir == 0 then pos.z = pos.z + 1
        elseif pos.dir == 1 then pos.x = pos.x + 1
        elseif pos.dir == 2 then pos.z = pos.z - 1
        elseif pos.dir == 3 then pos.x = pos.x - 1
        end
        return true
    end
    return false
end

moveTo = function(target)
    while pos.x ~= target.x do
        if pos.x < target.x then while pos.dir ~= 1 do turnRight() end
        else while pos.dir ~= 3 do turnRight() end
        end
        moveForward()
    end
    while pos.z ~= target.z do
        if pos.z < target.z then while pos.dir ~= 0 do turnRight() end
        else while pos.dir ~= 2 do turnRight() end
        end
        moveForward()
    end
end

-- ‚úÖ **Save and Return to Position**
savePosition = function()
    lastPos = {x = pos.x, y = pos.y, z = pos.z, dir = pos.dir}
end

returnToLastPosition = function()
    moveTo(lastPos)
    while pos.dir ~= lastPos.dir do turnRight() end
end

-- ‚úÖ **Restock Function**
restock = function(block)
    local blockID = fixBlockName(block)
    local chestPos = materialChests[blockID]

    if not chestPos then
        print("‚ùå ERROR: No chest found for " .. blockID)
        return false
    end

    print("üîÑ Moving to Restock " .. blockID .. " at Chest: X=" .. chestPos.x .. " Z=" .. chestPos.z)
    
    savePosition()
    moveTo(chestPos)
    while pos.dir ~= chestPos.dir do turnLeft() end

    local success = false

    for _ = 1, 27 do
        if turtle.suck(64) then
            for i = 1, 16 do
                local item = turtle.getItemDetail(i)
                if item and item.name == blockID then
                    print("‚úÖ Successfully Restocked: " .. blockID)
                    success = true
                    break
                end
            end
        end
        if success then break end
    end

    if not success then
        print("‚ùå Out of stock: " .. blockID)
    end

    returnToLastPosition()
    return success
end

-- ‚úÖ **Block Placement Function**
placeBlock = function(block)
    if not refuelTurtle() then return false end -- Check fuel before placing

    local blockID = fixBlockName(block)

    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == blockID then
            turtle.select(i)
            if turtle.placeDown() then
                print("‚úÖ Placed " .. blockID)
                return true
            else
                print("‚ùå Placement failed, restocking " .. blockID)
                if restock(block) then
                    return placeBlock(block)
                else
                    print("‚ùå Out of " .. blockID .. ", skipping.")
                    return false
                end
            end
        end
    end

    print("‚ùå No " .. blockID .. " found in inventory. Restocking...")
    if restock(block) then
        return placeBlock(block)
    else
        print("‚ùå Out of " .. blockID .. ", skipping.")
        return false
    end
end

-- ‚úÖ **Refuel Function (Uses 2 Aeternus Fuel Blocks)**
refuelTurtle = function()
    if turtle.getFuelLevel() >= 1000 then return true end -- Skip if enough fuel

    print("‚õΩ Low fuel! Moving to refuel.")

    savePosition()
    moveTo(fuelChest)
    while pos.dir ~= fuelChest.dir do turnLeft() end

    local refueled = 0
    for _ = 1, 2 do -- Attempt to grab and use 2 Aeternus Fuel Blocks
        if turtle.suck(1) then
            turtle.refuel()
            refueled = refueled + 1
        end
    end

    if refueled > 0 then
        print("‚úÖ Refueled with " .. refueled .. " Aeternus Fuel Blocks.")
    else
        print("‚ùå Fuel chest is empty! Build halted.")
        return false
    end

    returnToLastPosition()
    return true
end

-- ‚úÖ **Build Process**
buildSchematic = function()
    for _, blockData in ipairs(blocks) do
        moveTo(blockData)
        while not placeBlock(blockData[1]) do
            print("üîÑ Retrying placement of " .. blockData[1] .. " after restock")
        end
    end
    print("‚úÖ Build completed successfully!")
end

-- ‚úÖ **Start the Build**
buildSchematic()
