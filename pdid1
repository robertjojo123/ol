-- ✅ Placer Turtle Settings
local blockDataBaseUrl = "https://raw.githubusercontent.com/robertjojo123/olympus2/refs/heads/main/output_"
local totalFiles = 122
local startIndex = 1

-- ✅ Function: Wait for Previous Worker Turtle to be Removed
local function waitForTurtleRemoval()
    while turtle.detect() do
        print("⏳ Waiting for previous Worker Turtle to be removed...")
        sleep(2)
    end
end

-- ✅ Function: Execute a command inside the Worker Turtle
local function runCommandOnWorker(command)
    local worker = peripheral.wrap("front")
    if not worker then
        print("❌ ERROR: Worker Turtle not detected!")
        return false
    end
    local commandFile = fs.open("front/worker_command.lua", "w")
    commandFile.write(command)
    commandFile.close()
    worker.run("worker_command.lua")  -- Worker Turtle executes the written command
    return true
end

-- ✅ Function: Place and Setup New Worker Turtle
local function deployWorker(turtleIndex)
    print("📦 Placing Worker Turtle for `output_" .. turtleIndex .. ".lua`")

    -- Wait until there's space
    waitForTurtleRemoval()

    -- Place the Worker Turtle
    if not turtle.place() then
        print("❌ ERROR: Failed to place Worker Turtle!")
        return
    end

    -- Sleep to allow Turtle to initialize
    sleep(2)

    -- ✅ Tell Worker Turtle to `wget` the correct `output_X.lua`
    print("📥 Instructing Worker Turtle to download block data...")
    local wgetCommand = "shell.run('wget " .. blockDataBaseUrl .. turtleIndex .. ".lua output.lua')"
    if not runCommandOnWorker(wgetCommand) then
        print("❌ ERROR: Worker Turtle failed to download `output_" .. turtleIndex .. ".lua`")
        return
    end

    -- ✅ Tell Worker Turtle to copy `startup.lua` from Disk Drive
    print("📂 Instructing Worker Turtle to copy `startup.lua`...")
    if not runCommandOnWorker("shell.run('cp /disk/startup.lua /startup')") then
        print("❌ ERROR: Worker Turtle failed to copy `startup.lua` from Disk!")
        return
    end

    -- ✅ Tell Worker Turtle to reboot
    print("🔄 Instructing Worker Turtle to reboot...")
    if not runCommandOnWorker("os.reboot()") then
        print("❌ ERROR: Worker Turtle failed to reboot!")
        return
    end

    print("✅ Worker Turtle setup complete!")
end

-- ✅ Main Loop: Deploy Worker Turtles Sequentially
for i = startIndex, totalFiles do
    deployWorker(i)
    print("✅ Worker Turtle #" .. i .. " is now running! Waiting for removal before placing the next one...")
    waitForTurtleRemoval() -- Wait before placing the next Turtle
end

print("🎉 All Worker Turtles deployed!")
