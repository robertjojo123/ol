-- ‚úÖ Ensure the turtle has access to the Disk Drive
if not peripheral.find("drive") then
    print("‚ùå ERROR: No Disk Drive detected! Shutting down.")
    sleep(3)
    os.shutdown()
end

-- ‚úÖ Read Block Data Index from Disk
local blockDataIndex = nil
if fs.exists("/disk/block_index.txt") then
    local file = fs.open("/disk/block_index.txt", "r")
    blockDataIndex = tonumber(file.readAll())
    file.close()
end

if not blockDataIndex then
    print("‚ùå ERROR: No Block Data Index found on Disk! Shutting down.")
    sleep(3)
    os.shutdown()
end

print("üìÇ Using Block Data Index:", blockDataIndex)

-- ‚úÖ Copy necessary files from Disk Drive
print("üìÇ Copying `build.lua` to Turtle...")
shell.run("cp /disk/build.lua /build.lua")

-- ‚úÖ Download `output.lua` using the received index
print("üì• Downloading `output_" .. blockDataIndex .. ".lua`...")
local blockDataBaseUrl = "https://raw.githubusercontent.com/robertjojo123/olympus2/refs/heads/main/output_"
shell.run("wget " .. blockDataBaseUrl .. blockDataIndex .. ".lua output.lua")

if not fs.exists("output.lua") then
    print("‚ùå ERROR: Failed to download `output.lua`! Shutting down.")
    sleep(3)
    os.shutdown()
else
    print("‚úÖ Successfully downloaded `output.lua`!")
end

-- ‚úÖ Function Forward Declarations
local moveTo, accessChest, refuelTurtle, restock, placeBlock, startBuild

-- ‚úÖ Position Tracking
local pos = {x = -5, y = 0, z = 0, dir = 0}
local lastPos = {x = 0, y = 0, z = 0, dir = 0}

-- ‚úÖ Fuel & Material Chest Locations
local fuelChest = {x = -9, y = -1, z = -4} 
local fuelItem = "projecte:aeternus_fuel_block"

local materialChests = {
    ["minecraft:wool"]  = {{x = -9, y = 0, z = -4}, {x = -9, y = 1, z = -4}},
    ["minecraft:clay"]  = {{x = -9, y = 2, z = -4}, {x = -9, y = 3, z = -4}},
    ["minecraft:dirt"]  = {{x = -9, y = 4, z = -4}, {x = -9, y = 5, z = -4}}
}

-- ‚úÖ Move to Target Position
moveTo = function(target)
    while pos.x ~= target.x do
        if pos.x < target.x then turtle.turnRight() else turtle.turnLeft() end
        if turtle.forward() then pos.x = pos.x + (pos.dir == 1 and 1 or -1) end
    end

    while pos.z ~= target.z do
        if pos.z < target.z then turtle.turnLeft() else turtle.turnRight() end
        if turtle.forward() then pos.z = pos.z + (pos.dir == 0 and 1 or -1) end
    end

    print("‚úÖ Arrived at target.")
    return true
end

-- ‚úÖ Smart Restocking Function (Tries Different Chest Sides)
accessChest = function(chestPos)
    local accessPoints = {
        {x = chestPos.x + 1, y = chestPos.y, z = chestPos.z}, -- Right
        {x = chestPos.x - 1, y = chestPos.y, z = chestPos.z}, -- Left
        {x = chestPos.x, y = chestPos.y, z = chestPos.z + 1}, -- Front
        {x = chestPos.x, y = chestPos.y, z = chestPos.z - 1}  -- Back
    }

    for _, point in ipairs(accessPoints) do
        moveTo(point)

        -- Try to access chest
        if turtle.suck(64) then
            print("‚úÖ Accessed chest successfully!")
            return true
        end
    end

    print("‚ùå ERROR: Chest access failed, all sides blocked.")
    return false
end

-- ‚úÖ Refuel Turtle
refuelTurtle = function()
    moveTo(fuelChest)
    return accessChest(fuelChest)
end

-- ‚úÖ Restock Materials
restock = function(block)
    for _, chest in ipairs(materialChests["minecraft:" .. block] or {}) do
        if accessChest(chest) then return true end
    end
    return false
end

-- ‚úÖ Place Block
placeBlock = function(block)
    if not restock(block) then return false end

    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == "minecraft:" .. block then
            turtle.select(i)
            if turtle.placeDown() then
                print("‚úÖ Placed " .. block)
                return true
            end
        end
    end

    print("‚ùå ERROR: Could not place " .. block)
    return false
end

-- ‚úÖ Start Build Process
startBuild = function()
    print("üöÄ Starting Build Process...")
    shell.run("build.lua")
    os.shutdown()
end

startBuild()
